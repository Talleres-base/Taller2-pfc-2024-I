/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package taller2

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner
import scala.util.Random

@RunWith(classOf[JUnitRunner])
class InsertionSortTest extends AnyFunSuite {
  val objInsertionSort = new InsertionSort()
  val letras = List("a", "b", "c", "d", "e", "f", "g", "h", "i", "j","k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u","v", "w", "x", "y", "z")
  test("Caso 1 Enteros comprobar ordenamiento listas tamaño 100") {
    val cmp = (a:Int, b:Int) => a < b
    val lst = (1 to 100).map(_ => Random.nextInt(10000)).toList
    assert(objInsertionSort.sort[Int](cmp)(lst)._1 === lst.sortWith(cmp))
  }

  test("Caso 2 Enteros comprobar ordenamiento listas tamaño 500") {
    
    val cmp = (a:Int, b:Int) => a < b
    val lst = (1 to 500).map(_ => Random.nextInt(10000)).toList
    assert(objInsertionSort.sort[Int](cmp)(lst)._1 === lst.sortWith(cmp))
  }

  test("Caso 3 Enteros comprobar ordenamiento listas tamaño 1000") {
    
    val cmp = (a:Int, b:Int) => a < b
    val lst = (1 to 1000).map(_ => Random.nextInt(10000)).toList
    assert(objInsertionSort.sort[Int](cmp)(lst)._1 === lst.sortWith(cmp))
  }

  test("Caso 4 con String 500 aleatorios de tamaño entre 40 y 80") {

    val cmp = (a:String, b:String) => a.compareTo(b) == -1
    val sizeString:Int = Random.nextInt(80)+40
    val lst = (1 to 500).map(_ => (1 to sizeString).map(_ => letras(Random.nextInt(letras.size))).mkString).toList
    assert(objInsertionSort.sort[String](cmp)(lst)._1 === lst.sortWith(cmp))
  }
  

  test("Caso 5 con String 1000 aleatorios de tamaño entre 40 y 80") {

    val cmp = (a:String, b:String) => a.compareTo(b) == -1
    val sizeString:Int = Random.nextInt(80)+40
    val lst = (1 to 1000).map(_ => (1 to sizeString).map(_ => letras(Random.nextInt(letras.size))).mkString).toList
    assert(objInsertionSort.sort[String](cmp)(lst)._1 === lst.sortWith(cmp))
  }

  test("Caso 6 Verificar función insertar lista 800"){
    val cmp = (a:Int, b:Int) => a > b
    val lst = (1 to 800).map(_ => Random.nextInt(10000)).toList.sortWith(cmp)
    val elm = Random.nextInt(10000)
    assert(objInsertionSort.insert[Int](elm, lst, cmp)._1 === (elm :: lst).sortWith(cmp)) 
  }
  

  test("Caso 7 Verificar función insertar lista 1600 "){
    val cmp = (a:Int, b:Int) => a > b
    val lst = (1 to 1600).map(_ => Random.nextInt(10000)).toList.sortWith(cmp)
    val elm = Random.nextInt(10000)
    assert(objInsertionSort.insert[Int](elm, lst, cmp)._1 === (elm :: lst).sortWith(cmp)) 
  }

}
