/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package taller2

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner
import scala.util.Random

@RunWith(classOf[JUnitRunner])
class QuickSortTest extends AnyFunSuite {
  
  val objQuickSort = new QuickSort()
  
  val letras = List("a", "b", "c", "d", "e", "f", "g", "h", "i", "j","k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u","v", "w", "x", "y", "z")
  
  test("Caso 1 Enteros función QuickSort listas tamaño 100") {
    val cmp = (a: Int, b: Int) => a < b
    val lst = (1 to 100).map(_ => Random.nextInt(10000)).toList
    assert(objQuickSort.sort[Int](cmp)(lst)._1 === lst.sortWith((cmp)))
  }

  test("Caso 2 Enteros función QuickSort listas tamaño 500") {
    
    val cmp = (a: Int, b: Int) => a < b
    val lst = (1 to 500).map(_ => Random.nextInt(10000)).toList
    assert(objQuickSort.sort[Int](cmp)(lst)._1 === lst.sortWith((cmp)))
  }

  test("Caso 3 Enteros función QuickSort listas tamaño 1000") {
    
    val cmp = (a: Int, b: Int) => a < b
    val lst = (1 to 1000).map(_ => Random.nextInt(10000)).toList
    assert(objQuickSort.sort[Int](cmp)(lst)._1 === lst.sortWith((cmp)))
  }

  test("Caso 4 Verificar funciones menoresQue_noMenoresQue ") {
    val cmp = (a: Int, b: Int) => a < b
    val lst = (1 to 1000).map(_ => Random.nextInt(10000)).toList
    val index = Random.nextInt(lst.length)
    val v = lst(index)
    val (menores, noMenores, _) = objQuickSort.menoresQue_noMenoresQue(lst, v, cmp)
    assert(menores.forall(cmp(_, v)) && noMenores.forall(!cmp(_, v)))
  }
  
  test("Caso 5 con String 500 aleatorios de tamaño entre 40 y 80") {

    val cmp = (a:String, b:String) => a.compareTo(b) < 0
    val sizeString:Int = Random.nextInt(80)+40
    val lst = (1 to 500).map(_ => (1 to sizeString).map(_ => letras(Random.nextInt(letras.size))).mkString).toList
    assert(objQuickSort.sort[String](cmp)(lst)._1 === lst.sortWith(cmp))
  }
  

  test("Caso 6 con String 1000 aleatorios de tamaño entre 40 y 80") {

    val cmp = (a:String, b:String) => a.compareTo(b) < 0
    val sizeString:Int = Random.nextInt(80)+40
    val lst = (1 to 1000).map(_ => (1 to sizeString).map(_ => letras(Random.nextInt(letras.size))).mkString).toList
    assert(objQuickSort.sort[String](cmp)(lst)._1 === lst.sortWith(cmp))
  }


}
