/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package ejercicio

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class EjercicioTest extends AnyFunSuite {

  val objEjercicio = new Ejercicio()


  test("Prueba 1 Ejercicio 1") {
    val lista = List(1,2,1,1,1,2,2,3,3,3,4,4,4,4,4,5,5,5,3)
    val result = objEjercicio.ejercicio1(lista)
    assert(result == List(1,2,3,4,5))
  } 

  test("Prueba 2 Ejercicio 1") {
    val lista = List(1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2)
    val result = objEjercicio.ejercicio1(lista)
    assert(result == List(1,2,3))
  }

  test("Prueba 3 Ejercicio 1") {
    val lista = List(10,10,8,8,1,9,9,9,2,3,4,5,6,7,8,9,10,10)
    val result = objEjercicio.ejercicio1(lista)
    assert(result == List(1,2,3,4,5,6,7,8,9,10))
  }

  /**
   * 
Dada dos listas de n√∫meros debe retornar los elementos que se repiten en ambas listas ordenados de menor a mayor
*/
  test("Prueba 1 Ejercicio 2") {
    val l1 = List(10,9,8,8,7,6,6)
    val l2 = List(2,4,6,8,8,10,10,10,10)
    val result = objEjercicio.ejercicio2(l1,l2)
    assert(result == List(6,8))
  }

  test("Prueba 2 Ejercicio 2") {
    val l1 = List(2,4,6,2,4,4,8,10,12,12,10,11)
    val l2 = List(1,1,1,3,4,5,6,6)
    assert(objEjercicio.ejercicio2(l1,l2) == List(4,6))
  }

  test("Prueba 3 Ejercicio 2") {
    val l1 = List(1,1,2,2,2,3,3,4,4,4,5,5,6,8,8,6,7,1)
    val l2 = List(2,4,6,1,3,10,1,5,8,5)
    assert(objEjercicio.ejercicio2(l1,l2) == List(1,5))
  }
}
